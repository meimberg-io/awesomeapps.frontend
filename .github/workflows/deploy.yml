name: Deploy AwesomeApps Frontend to Server

on:
  push:
    branches: [ main, master ]

env:
  APP_PORT: ${{ vars.APP_PORT }}
  APP_NAME: "awesomeapps-frontend"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      env:
        NEXT_PUBLIC_STRAPI_BASEURL: ${{ vars.NEXT_PUBLIC_STRAPI_BASEURL }}
        NEXT_PUBLIC_APP_BASEURL: ${{ vars.NEXT_PUBLIC_APP_BASEURL }}
        NEXT_PUBLIC_MATOMO_TRACKER: ${{ vars.NEXT_PUBLIC_MATOMO_TRACKER }}
      run: |
        npm run lint
        npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create .env file
      run: |
        cat > .env << EOF
        NODE_ENV=production
        APP_PORT=${{ vars.APP_PORT }}
        PORT=5680
        NEXT_PUBLIC_STRAPI_BASEURL=${{ vars.NEXT_PUBLIC_STRAPI_BASEURL }}
        NEXT_PUBLIC_APP_BASEURL=${{ vars.NEXT_PUBLIC_APP_BASEURL }}
        NEXT_PUBLIC_MATOMO_TRACKER=${{ vars.NEXT_PUBLIC_MATOMO_TRACKER }}
        REVALIDATE_SECRET=${{ secrets.REVALIDATE_SECRET }}
        EOF

    - name: Deploy files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ vars.HOST }}
        username: ${{ vars.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "."
        target: "/srv/awesomeapps-frontend/app"
        rm: false
        strip_components: 0

    - name: Deploy with Docker Compose
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.HOST }}
        username: ${{ vars.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /srv/awesomeapps-frontend/app
          
          # Deploy using the unified docker-compose.yml with production profile
          docker-compose down || true
          docker-compose --profile prod up -d --build
          
          # Clean up
          docker image prune -f
          
          # Verify deployment
          echo "Waiting for application to start..."
          sleep 120
          if curl -f http://localhost:$APP_PORT/ > /dev/null 2>&1; then
            echo "✅ AwesomeApps deployed successfully on port $APP_PORT!"
            echo "🌐 Application is available at: http://${{ vars.HOST || secrets.HOST }}:$APP_PORT"
          else
            echo "❌ Deployment verification failed!"
            echo "📋 Container logs:"
            docker-compose --profile prod logs || true
            exit 1
          fi

